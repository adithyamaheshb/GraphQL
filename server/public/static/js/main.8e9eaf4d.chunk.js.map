{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","b","key","id","displayBookDetails","React","Component","graphql","options","variables","selectedBook","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","loading","Math","random","onClick","setState","displayData","components_BookDetails","AddBook","handleChange","e","_e$target","target","value","defineProperty","submitForm","preventDefault","_this$state","bookName","authorId","refetchQueries","query","console","log","disabled","authors","_this$state2","onSubmit","type","onChange","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_esm","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8e9eaf4d.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nconst getBooksQuery = gql`\r\n{\r\n    books {\r\n        name\r\n        id\r\n    }\r\n}\r\n`\r\n\r\nconst getAuthorsQuery = gql`\r\n{\r\n    authors {\r\n        name\r\n        id\r\n    }\r\n}\r\n`\r\n\r\nconst addBookMutation = gql`\r\n    mutation($name: String!, $genre: String!, $authorId: ID!) {\r\n        addBook(name: $name, genre: $genre, authorId: $authorId){\r\n            name\r\n            id           \r\n        }\r\n    }`\r\n\r\nconst getBookQuery = gql`\r\n    query($id: ID){\r\n        book(id: $id){\r\n            id\r\n            name\r\n            genre\r\n            author{\r\n                id\r\n                name\r\n                age\r\n                books{\r\n                    name\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }`\r\n\r\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery };","import React from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getBookQuery } from './../queries/queries'\r\n\r\nclass BookDetails extends React.Component{\r\n    displayBookDetails() {\r\n        const { book } = this.props.data;\r\n        if(book) {\r\n            return(\r\n                <div>\r\n                    <h2>{book.name}</h2>\r\n                    <p>{book.genre}</p>\r\n                    <p>{book.author.name}</p>\r\n                    <p>All books by {book.author.name}</p>\r\n                    <ul className=\"other-books\">\r\n                        {book.author.books.map((b) => {\r\n                            return (<li key={b.id}>{b.name}</li>)\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return <div>No book selected</div>\r\n        }\r\n    }\r\n  render() {\r\n    return (\r\n      <div id=\"book-details\">\r\n        {this.displayBookDetails()}  \r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default graphql(getBookQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: props.selectedBook\r\n            }\r\n        }\r\n    }\r\n})(BookDetails)","import React from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getBooksQuery } from './../queries/queries'\r\n\r\n//component\r\nimport BookDetails from './BookDetails';\r\n\r\nclass BookList extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      selectedBook: null\r\n    }\r\n  }\r\n  displayData() {\r\n    var data = this.props.data;\r\n    if(data.loading) {\r\n      return <div>Loading Books.....</div>\r\n    }\r\n    else {\r\n      return data.books.map((book, b) => {\r\n        return (\r\n          <li key={Math.random()} onClick={() => this.setState({ selectedBook: book.id })}>{book.name}</li>\r\n        )\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul id=\"book-list\">\r\n            {this.displayData()}\r\n        </ul>\r\n        <BookDetails selectedBook={this.state.selectedBook}/>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import React from 'react';\r\nimport { graphql, compose } from 'react-apollo';\r\nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from './../queries/queries'\r\n\r\nclass AddBook extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bookName: '',\r\n            genre: '',\r\n            authorId: ''\r\n        }\r\n    }\r\n    displayAuthors() {\r\n        var data = this.props.getAuthorsQuery;\r\n        console.log(data);\r\n        if(data.loading){\r\n            return (<option disabled>Loading Authors.....</option>);\r\n        }\r\n        else {\r\n            return data.authors.map((author) => {\r\n                return( <option key={Math.random()} value={author.id}>{author.name}</option> )\r\n            })\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        let { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n    submitForm = (e) => {\r\n        e.preventDefault();\r\n        const { bookName, genre, authorId } = this.state;\r\n        this.props.addBookMutation({\r\n            variables : {\r\n                name: bookName, \r\n                genre: genre,\r\n                authorId: authorId\r\n            },\r\n            refetchQueries: [{ query: getBooksQuery }]\r\n        }\r\n        // , () => {\r\n        //     this.setState({ bookName: '', genre: '', authorId: ''})\r\n        // }\r\n        );\r\n    }\r\n    render() {\r\n        const { bookName, genre, authorId } = this.state;\r\n        return(\r\n            <div>\r\n                <form id=\"add-book\" onSubmit={this.submitForm}>\r\n                    <div className=\"field\">\r\n                        <label>Book Name:</label>\r\n                        <input type=\"text\" name=\"bookName\" value={bookName} onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <label>Genre:</label>\r\n                        <input type=\"text\" name=\"genre\" value={genre} onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <label>Author:</label>\r\n                        <select name=\"authorId\" value={authorId} onChange={this.handleChange}>\r\n                            <option>Select author</option>\r\n                            {this.displayAuthors()}\r\n                        </select>\r\n                    <button>+</button>\r\n                </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\"}),\r\n    graphql(addBookMutation, { name: \"addBookMutation\"})\r\n)(AddBook)","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n//components\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\n\n//Apollo Client setup\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends React.Component{\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n        <h1> ADB's Reading List</h1> \n        <BookList/>\n        <AddBook/>\n        </div>\n      </ApolloProvider>\n    )\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}